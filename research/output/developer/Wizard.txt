/** 
 * A Wizard dialog displaying one to many screens
 * <ul>
 * <li>Create a class that extends Wizard. You have to implement
 * getPreviousScreen(), getNextScreen() and finish() abstract methods</li>
 * <li> Displaying the wizard:</li>
 * <pre>
 * MyWizard wizard = new MyWizard(String sName,Class initial,
 * ImageIcon icon,Frame parentWindow,
 * Locale locale,int iHSize,int iVSize);
 * wizard.show();
 * </pre>
 * <li>finish() method implements actions to be done at the end of the wizard</li>
 * <li>getPreviousScreen() and getNextScreen() have to return previous or next
 * screen class. Example:</li>
 * <pre>
 * public Class getNextScreen(Class screen) {
 * if (ActionSelectionPanel.class.equals(getCurrentScreen())) {
 * String sAction = (String) data.get(KEY_ACTION);
 * if (ActionSelectionPanel.ACTION_CREATION.equals(sAction)) {
 * return TypeSelectionPanel.class;
 * } else if (ActionSelectionPanel.ACTION_DELETE.equals(sAction)) {
 * return RemovePanel.class;
 * }
 * }
 * }
 * </pre>
 * </ul>
 * @author Bertrand Florat
 * @created 1 may 2006
 */

/** 
 * Wizard name. 
 */

/** 
 * Current screen. 
 */

/** 
 * Wizard left side icon. 
 */

/** 
 * Wizard data. 
 */

/** 
 * Wizard header. 
 */

/** 
 * Wizard action Panel. 
 */

/** 
 * Wizard dialog. 
 */

/** 
 * Parent window. 
 */

/** 
 * Screens instance repository. 
 */

/** 
 * Default Wizard size. 
 */

/** 
 * The Constant DEFAULT_V_SIZE.   
 */

/** 
 * The Constant DEFAULT_H_LAYOUT_PADDING.   
 */

/** 
 * The Constant DEFAULT_V_LAYOUT_PADDING.   
 */

/** 
 * Was the Wizard Canceled?. 
 */

/** 
 * Layout Padding. 
 */

/** 
 * Wizard constructor.
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param backgroundImage background image
 * @param parentWindow wizard parent window
 * @param locale Wizard locale
 * @param iHSize Horizontal size
 * @param iVSize Vertical size
 * @param iLayoutHPadding Horizontal layout padding
 * @param iLayoutVPadding Vertical layout padding
 */

/** 
 * Wizard constructor.
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param parentWindow wizard parent window
 * @param locale Wizard locale
 * @param iHSize Horizontal size
 * @param iVSize Vertical size
 */

/** 
 * Wizard constructor.
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param backgroundImage Wizard header background (null if no image)
 * @param parentWindow wizard parent window
 * @param locale Wizard locale
 */

/** 
 * Wizard constructor.
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param parentWindow wizard parent window
 * @param locale Wizard locale
 */

/** 
 * Wizard constructor (uses default locale).
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param backgroundImage Wizard header background (null if no image)
 * @param parentWindow wizard parent window
 */

/** 
 * Wizard constructor (uses default locale).
 * @param sName Wizard name displayed in dialog title
 * @param initial Initial screen class
 * @param icon Wizard icon (null if no icon)
 * @param parentWindow wizard parent window
 */

/** 
 * Show.
 */

/** 
 * access to the JDialog of the wizard, in case we need it (for instance to
 * set a glass pane when waiting).
 * @return the wizard dialog
 */

/** 
 * UI manager.
 */

// modal

// Set default size

// Previous required. Note that the previous button is enabled only if the user can go previous

/** 
 * Set the screen to display a a class.
 * @param screenClass 
 */

// If the class is an clear point, we clean up all previous screens otherwise, try to get a screen from buffer or create it if needed

/** 
 * Called at each screen refresh.
 */

// Add a listener to resize left side image if wizard window is resized

// Display icon new size, useful to create an image with right default size

/** 
 * Set the header image.
 * @param img 
 */

/** 
 * Set the header icon.
 * @param icon 
 */

/** 
 * Set the background color of the ActionPanel.
 * @param color 
 */

/** 
 * Set the background color of the ActionPanel's Problem notification area.
 * @param color 
 */

/** 
 * Gets the previous screen.
 * @param screen 
 * @return previous screen class
 */

/** 
 * Clear screens history.
 */

/** 
 * Gets the next screen.
 * @param screen 
 * @return next screen class
 */

/** 
 * Get current screen.
 * @return current screen class
 */

/** 
 * Refresh buttons and problems. Called asynchronously by the screens or by
 * the wizard itself.
 */

/** 
 * Finish action. Called when user clicks on "finish"
 */

/** 
 * Called when user clicks on "cancel". Override it if you want to do
 * something in cancel such as display a confirmation dialog.
 * <p>
 * @return return true if the Wizard should continue to close
 * return false if the Wizard should abort the cancellation
 */

/** 
 * Icon resizing.
 * @param img 
 * @param iNewWidth 
 * @param iNewHeight 
 * @return resized icon
 */

// if cancel is disabled, then don't call the onCancel function and don't dispose

/** 
 * Called when the wizard dialog opens. Override it if you want notification
 * of this event.
 * @param windowEvent 
 */

/** 
 * Called when the wizard dialog is closed. Override it if you want
 * notification of this event.
 * <p>
 * <b>caution:</b> You must always call super.windowClosed(windowEvent)
 * within the override function to ensure that the Wizard closes completely.
 * @param windowEvent 
 */

/** 
 * Called when the wizard dialog is iconified. Override it if you want
 * notification of this event.
 * @param windowEvent 
 */

/** 
 * Called when the wizard dialog is deiconified. Override it if you want
 * notification of this event.
 * @param windowEvent 
 */

/** 
 * Called when the wizard dialog is activated. Override it if you want
 * notification of this event.
 * @param windowEvent 
 */

/** 
 * Called when the wizard dialog is deactivated. Override it if you want
 * notification of this event.
 * @param windowEvent 
 */

/** 
 * Was cancelled.
 * @return true if...
 */
